version: "1.1.0-{build}"

branches:
  only:
    - master

os: Windows Server 2012 R2

environment:
  GOPATH: c:\gopath
#  CC: gcc

init:
  - set PATH=%GOPATH%\bin;C:\mingw64\bin;%PATH%
  - git config --global core.autocrlf input

install:
#  - ps: |
#      # Install MinGW
#      $url  = "http://sourceforge.net/projects/mingw-w64/files/"
#      $url += "Toolchains%20targetting%20Win64/Personal%20Builds/"
#      $url += "mingw-builds/5.1.0/threads-win32/seh/"
#      $url += "x86_64-5.1.0-release-win32-seh-rt_v4-rev0.7z/download"
#      Invoke-WebRequest -UserAgent wget -Uri $url -OutFile x86_64-5.1.0-release-win32-seh-rt_v4-rev0.7z
#      &7z x -oC:\ x86_64-5.1.0-release-win32-seh-rt_v4-rev0.7z > $null
#  - gcc -v
  - go version
  - go env
  - mkdir %GOPATH%
  - go get -u golang.org/x/tools/cmd/cover
  - go get -u github.com/tischda/go2xunit

build_script:
  - build.bat

test_script:
  - refresh.exe -version
  - go test -v -cover
  - go test -v | go2xunit -xunitnet > xunit-report.xml
  - refresh.exe

artifacts:
  - path: refresh.exe
    name: Refresh

deploy: off

on_finish:
- ps: >-
    If (Test-Path .\xunit-report.xml) {
      (New-Object 'System.Net.WebClient').UploadFile("https://ci.appveyor.com/api/testresults/xunit/$($env:APPVEYOR_JOB_ID)", (Resolve-Path .\xunit-report.xml))
    }
